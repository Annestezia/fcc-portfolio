{"version":3,"sources":["images/drum-machine-preview.png","images/twitch-tv-preview.jpg","images/markdown-previewer-preview.png","images/quote-machine-preview.png","images/local-weather-app-preview.jpg","images/survey-form-preview.png","images/wiki-viewer-preview.png","images/landing-page-preview.png","images/tech-docs-preview.png","images/tribute-page-preview.png","images/landing-page-v2-preview.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","projects","title","description","link","level","bg","twitch_tv_bg","quote_machine_bg","markdown_previewer_bg","local_weather_app_bg","tech_docs_bg","drum_machine_bg","wiki_viewer_bg","landing_page_v2_bg","tribute_page_bg","survey_form_bg","landing_page_bg","map","project","className","key","id","split","join","toLowerCase","style","backgroundImage","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,wD,gBCA3CD,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,uD,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,qD,mVCsD5BC,EAlCH,SAACC,GACX,IAAMC,EAAW,CACf,CAAEC,MAAM,YAAaC,YAAY,qBAAqBC,KAAK,yCAAyCC,MAAM,SAASC,GAAIC,KACvH,CAAEL,MAAM,gBAAiBC,YAAY,8BAA8BC,KAAK,kDAAkDC,MAAM,SAASC,GAAIE,KAC7I,CAAEN,MAAM,qBAAsBC,YAAY,YAAYC,KAAK,uDAAwDC,MAAM,SAAUC,GAAIG,KACvI,CAAEP,MAAM,oBAAqBC,YAAY,2BAA2BC,KAAK,kDAAkDC,MAAM,SAAUC,GAAII,KAC/I,CAAER,MAAM,YAAaC,YAAY,sCAAsCC,KAAK,4CAA4CC,MAAM,SAAUC,GAAIK,KAC5I,CAAET,MAAM,eAAgBC,YAAY,cAAcC,KAAK,iDAAiDC,MAAM,SAAUC,GAAIM,KAC5H,CAAEV,MAAM,cAAeC,YAAY,wBAAwBC,KAAK,2CAA2CC,MAAM,SAAUC,GAAIO,KAC/H,CAAEX,MAAM,kBAAmBC,YAAY,8BAA8BC,KAAK,wCAAwCC,MAAM,SAAUC,GAAIQ,KACtI,CAAEZ,MAAM,gBAAiBC,YAAY,gCAAgCC,KAAK,4CAA4CC,MAAM,SAAUC,GAAIS,KAC1I,CAAEb,MAAM,cAAeC,YAAY,qBAAsBC,KAAK,4CAA6CC,MAAM,SAAUC,GAAIU,KAC/H,CAAEd,MAAM,eAAgBC,YAAY,8BAA8BC,KAAK,4CAA4CC,MAAM,SAAUC,GAAIW,MAGzI,OAEA,oCACGhB,EAASiB,IAAI,SAAAC,GAAO,OACnB,yBAAKC,UAAS,uBAAmBD,EAAQd,OAASgB,IAAKF,EAAQjB,MAAOoB,GAClEH,EAAQjB,MAAMqB,MAAM,KAAKC,KAAK,KAAKC,cAAeC,MAAO,CACzDC,gBAAgB,OAAD,OAAQR,EAAQb,GAAhB,OAEjB,uBAAGsB,KAAMT,EAAQf,KAAMF,MAAK,UAAMiB,EAAQjB,MAAd,SAA4B2B,OAAO,UAC7D,yBAAKT,UAAU,WACb,wBAAIA,UAAU,iBAAiBD,EAAQjB,OACvC,0BAAMkB,UAAY,uBAAuBD,EAAQhB,oBClCzC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9d61a57d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drum-machine-preview.73ca4388.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch-tv-preview.7571b0d4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/markdown-previewer-preview.b66e64d8.png\";","module.exports = __webpack_public_path__ + \"static/media/quote-machine-preview.fd9b2068.png\";","module.exports = __webpack_public_path__ + \"static/media/local-weather-app-preview.6348ffcd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/survey-form-preview.7f8886e9.png\";","module.exports = __webpack_public_path__ + \"static/media/wiki-viewer-preview.497ca1b2.png\";","module.exports = __webpack_public_path__ + \"static/media/landing-page-preview.c56b6ef2.png\";","module.exports = __webpack_public_path__ + \"static/media/tech-docs-preview.031a1b68.png\";","module.exports = __webpack_public_path__ + \"static/media/tribute-page-preview.f588a159.png\";","module.exports = __webpack_public_path__ + \"static/media/landing-page-v2-preview.05a2c47c.png\";","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.scss';\r\n// import projects from './projects'\r\n// import projects from './assets/projects.js';\r\nimport drum_machine_bg from './images/drum-machine-preview.png';\r\nimport twitch_tv_bg from './images/twitch-tv-preview.jpg';\r\nimport markdown_previewer_bg from './images/markdown-previewer-preview.png';\r\nimport quote_machine_bg from './images/quote-machine-preview.png';\r\nimport local_weather_app_bg from './images/local-weather-app-preview.jpg';\r\nimport survey_form_bg from './images/survey-form-preview.png';\r\nimport wiki_viewer_bg from './images/wiki-viewer-preview.png';\r\nimport landing_page_bg from './images/landing-page-preview.png';\r\nimport tech_docs_bg from './images/tech-docs-preview.png';\r\nimport tribute_page_bg from './images/tribute-page-preview.png';\r\nimport landing_page_v2_bg from './images/landing-page-v2-preview.png';\r\n\r\n\r\n\r\n\r\nconst App = (props) => {\r\n  const projects = [\r\n    { title:\"Twitch TV\", description:\"JQuery, Twitch API\",link:\"https://annestezia.github.io/TwitchTV/\",level:\"span-2\",bg: twitch_tv_bg}, \r\n    { title:\"Quote Machine\", description:\"GitHub API, Twitter API, JS\",link:\"https://annestezia.github.io/fcc-quote-machine/\",level:\"span-1\",bg: quote_machine_bg},\r\n    { title:\"Markdown Previewer\", description:\"marked.js\",link:\"https://annestezia.github.io/fcc-markdown-previewer/\", level:\"span-2\", bg: markdown_previewer_bg},\r\n    { title:\"Local Weather App\", description:\"Dark Sky API, jQuery,BS4\",link:\"https://annestezia.github.io/Local-weather-app/\",level:\"span-1\", bg: local_weather_app_bg},\r\n    { title:\"Tech Docs\", description:\"Tech Docs, SCSS, prism.js, adaptive\",link:\"https://codepen.io/Annestezia/full/aKZmQO\",level:\"span-1\", bg: tech_docs_bg},\r\n    { title:\"Drum Machine\", description:\"React, SCSS\",link:\"https://annestezia.github.io/fcc-drum-machine/\",level:\"span-2\", bg: drum_machine_bg},\r\n    { title:\"Wiki Viewer\", description:\"Wikipedia API, jQuery\",link:\"https://annestezia.github.io/WikiViewer/\",level:\"span-1\", bg: wiki_viewer_bg},\r\n    { title:\"Landing Page v2\", description:\"Waypoints.js, Feather icons\",link:\"https://annestezia.github.io/fcc-lp2/\",level:\"span-1\", bg: landing_page_v2_bg},\r\n    { title:\"Tribute Page \", description:\"HTML, Bootstrap, Font Awesome\",link:\"https://annestezia.github.io/TributePage/\",level:\"span-1\", bg: tribute_page_bg},\r\n    { title:\"Survey Form\", description:\"HTML5, animate.css\", link:\"https://codepen.io/Annestezia/full/JZKKVV\", level:\"span-1\", bg: survey_form_bg  },\r\n    { title:\"Landing Page\", description:\"Waypoints.js, Feather icons\",link:\"https://codepen.io/Annestezia/pen/KBGeKW/\",level:\"span-1\", bg: landing_page_bg}\r\n  ];\r\n\r\n  return(\r\n\r\n  <>\r\n    {projects.map(project => (\r\n      <div className= {`project-tile ${project.level}`} key={project.title} id = {\r\n          project.title.split(' ').join('-').toLowerCase()} style={{\r\n          backgroundImage:`url(${project.bg})`\r\n        }}>\r\n        <a href={project.link} title= {`${project.title} demo`} target=\"_blank\">\r\n          <div className=\"overlay\">\r\n            <h3 className=\"project-title\">{project.title}</h3>\r\n            <span className = \"project-description\">{project.description}</span>\r\n          </div>\r\n        </a>\r\n      </div>\r\n    ))}\r\n  </>\r\n)};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}